
git-split-commit [--directory DIR] commits...
git-split-commit --commit
git-split-commit --abort

* Idea

(All work takes place in subdirectory DIR, "SPLIT" by default.
Probably on a special ad-hoc branch.)

Take a commit, or a range of commits.
Produce a diff file.
Break the diff file into hunks.  
Throw each hunk into a separate file whose name looks like
      orig-filename:SHA-1:seqno
Save state (just dir name, probably) somewhere, perhaps .git/split-commit.
(Remember all the commit files and refuse to finish up as long as some
remain uncommitted?)

** On --commit:

Look in DIR for subdirectories.  

If none, then error message?

For each subdir, look in it for patches
Also for a COMMITMSG file
Apply patches and create commit
Remove subdir

If no patch files left in base DIR, update original ref
also leave ORIG_HEAD

** On --abort:

clean up 

* What's in the state directory?


